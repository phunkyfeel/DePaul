Terminals which are not used

   ERROR


State 1 conflicts: 3 shift/reduce


Grammar

    0 $accept: expr $end

    1 list: list expr
    2     | /* empty */

    3 expr: BEGIN_P PRINT expr END_P
    4     | BEGIN_P PRINT STRING END_P
    5     | BEGIN_P READ END_P
    6     | BEGIN_P IF expr expr END_P
    7     | BEGIN_P IF expr expr expr END_P
    8     | BEGIN_P WHILE expr expr END_P
    9     | BEGIN_P list END_P
   10     | BEGIN_P expr END_P
   11     | BEGIN_P EQUAL VARIABLE expr END_P
   12     | BEGIN_P LESS expr expr END_P
   13     | BEGIN_P GREATER expr expr END_P
   14     | BEGIN_P PLUS expr expr END_P
   15     | BEGIN_P MINUS expr expr END_P
   16     | BEGIN_P STAR expr expr END_P
   17     | BEGIN_P SLASH expr expr END_P
   18     | BEGIN_P EQUALTO expr expr END_P
   19     | BEGIN_P NOTEQUALTO expr expr END_P
   20     | BEGIN_P PRINTLN expr END_P
   21     | BEGIN_P PRINTLN STRING END_P
   22     | BEGIN_P NOT expr END_P
   23     | BEGIN_P UMINUS expr END_P
   24     | BEGIN_P DO list expr END_P
   25     | NUMBER
   26     | VARIABLE


Terminals, with rules where they appear

$end (0) 0
error (256)
BEGIN_P (258) 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
    23 24
END_P (259) 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
    24
PRINT (260) 3 4
READ (261) 5
IF (262) 6 7
WHILE (263) 8
DO (264) 24
PRINTLN (265) 20 21
NOTEQUALTO (266) 19
EQUALTO (267) 18
EQUAL (268) 11
GREATER (269) 13
LESS (270) 12
MINUS (271) 15
PLUS (272) 14
SLASH (273) 17
STAR (274) 16
NOT (275) 22
UMINUS (276) 23
VARIABLE (277) 11 26
NUMBER (278) 25
STRING (279) 4 21
ERROR (280)


Nonterminals, with rules where they appear

$accept (26)
    on left: 0
list (27)
    on left: 1 2, on right: 1 9 24
expr (28)
    on left: 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
    24 25 26, on right: 0 1 3 6 7 8 10 11 12 13 14 15 16 17 18 19 20
    22 23 24


state 0

    0 $accept: . expr $end

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 4


state 1

    3 expr: BEGIN_P . PRINT expr END_P
    4     | BEGIN_P . PRINT STRING END_P
    5     | BEGIN_P . READ END_P
    6     | BEGIN_P . IF expr expr END_P
    7     | BEGIN_P . IF expr expr expr END_P
    8     | BEGIN_P . WHILE expr expr END_P
    9     | BEGIN_P . list END_P
   10     | BEGIN_P . expr END_P
   11     | BEGIN_P . EQUAL VARIABLE expr END_P
   12     | BEGIN_P . LESS expr expr END_P
   13     | BEGIN_P . GREATER expr expr END_P
   14     | BEGIN_P . PLUS expr expr END_P
   15     | BEGIN_P . MINUS expr expr END_P
   16     | BEGIN_P . STAR expr expr END_P
   17     | BEGIN_P . SLASH expr expr END_P
   18     | BEGIN_P . EQUALTO expr expr END_P
   19     | BEGIN_P . NOTEQUALTO expr expr END_P
   20     | BEGIN_P . PRINTLN expr END_P
   21     | BEGIN_P . PRINTLN STRING END_P
   22     | BEGIN_P . NOT expr END_P
   23     | BEGIN_P . UMINUS expr END_P
   24     | BEGIN_P . DO list expr END_P

    BEGIN_P     shift, and go to state 1
    PRINT       shift, and go to state 5
    READ        shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    DO          shift, and go to state 9
    PRINTLN     shift, and go to state 10
    NOTEQUALTO  shift, and go to state 11
    EQUALTO     shift, and go to state 12
    EQUAL       shift, and go to state 13
    GREATER     shift, and go to state 14
    LESS        shift, and go to state 15
    MINUS       shift, and go to state 16
    PLUS        shift, and go to state 17
    SLASH       shift, and go to state 18
    STAR        shift, and go to state 19
    NOT         shift, and go to state 20
    UMINUS      shift, and go to state 21
    VARIABLE    shift, and go to state 2
    NUMBER      shift, and go to state 3

    BEGIN_P   [reduce using rule 2 (list)]
    VARIABLE  [reduce using rule 2 (list)]
    NUMBER    [reduce using rule 2 (list)]
    $default  reduce using rule 2 (list)

    list  go to state 22
    expr  go to state 23


state 2

   26 expr: VARIABLE .

    $default  reduce using rule 26 (expr)


state 3

   25 expr: NUMBER .

    $default  reduce using rule 25 (expr)


state 4

    0 $accept: expr . $end

    $end  shift, and go to state 24


state 5

    3 expr: BEGIN_P PRINT . expr END_P
    4     | BEGIN_P PRINT . STRING END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3
    STRING    shift, and go to state 25

    expr  go to state 26


state 6

    5 expr: BEGIN_P READ . END_P

    END_P  shift, and go to state 27


state 7

    6 expr: BEGIN_P IF . expr expr END_P
    7     | BEGIN_P IF . expr expr expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 28


state 8

    8 expr: BEGIN_P WHILE . expr expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 29


state 9

   24 expr: BEGIN_P DO . list expr END_P

    $default  reduce using rule 2 (list)

    list  go to state 30


state 10

   20 expr: BEGIN_P PRINTLN . expr END_P
   21     | BEGIN_P PRINTLN . STRING END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3
    STRING    shift, and go to state 31

    expr  go to state 32


state 11

   19 expr: BEGIN_P NOTEQUALTO . expr expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 33


state 12

   18 expr: BEGIN_P EQUALTO . expr expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 34


state 13

   11 expr: BEGIN_P EQUAL . VARIABLE expr END_P

    VARIABLE  shift, and go to state 35


state 14

   13 expr: BEGIN_P GREATER . expr expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 36


state 15

   12 expr: BEGIN_P LESS . expr expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 37


state 16

   15 expr: BEGIN_P MINUS . expr expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 38


state 17

   14 expr: BEGIN_P PLUS . expr expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 39


state 18

   17 expr: BEGIN_P SLASH . expr expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 40


state 19

   16 expr: BEGIN_P STAR . expr expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 41


state 20

   22 expr: BEGIN_P NOT . expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 42


state 21

   23 expr: BEGIN_P UMINUS . expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 43


state 22

    1 list: list . expr
    9 expr: BEGIN_P list . END_P

    BEGIN_P   shift, and go to state 1
    END_P     shift, and go to state 44
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 45


state 23

   10 expr: BEGIN_P expr . END_P

    END_P  shift, and go to state 46


state 24

    0 $accept: expr $end .

    $default  accept


state 25

    4 expr: BEGIN_P PRINT STRING . END_P

    END_P  shift, and go to state 47


state 26

    3 expr: BEGIN_P PRINT expr . END_P

    END_P  shift, and go to state 48


state 27

    5 expr: BEGIN_P READ END_P .

    $default  reduce using rule 5 (expr)


state 28

    6 expr: BEGIN_P IF expr . expr END_P
    7     | BEGIN_P IF expr . expr expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 49


state 29

    8 expr: BEGIN_P WHILE expr . expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 50


state 30

    1 list: list . expr
   24 expr: BEGIN_P DO list . expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 51


state 31

   21 expr: BEGIN_P PRINTLN STRING . END_P

    END_P  shift, and go to state 52


state 32

   20 expr: BEGIN_P PRINTLN expr . END_P

    END_P  shift, and go to state 53


state 33

   19 expr: BEGIN_P NOTEQUALTO expr . expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 54


state 34

   18 expr: BEGIN_P EQUALTO expr . expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 55


state 35

   11 expr: BEGIN_P EQUAL VARIABLE . expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 56


state 36

   13 expr: BEGIN_P GREATER expr . expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 57


state 37

   12 expr: BEGIN_P LESS expr . expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 58


state 38

   15 expr: BEGIN_P MINUS expr . expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 59


state 39

   14 expr: BEGIN_P PLUS expr . expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 60


state 40

   17 expr: BEGIN_P SLASH expr . expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 61


state 41

   16 expr: BEGIN_P STAR expr . expr END_P

    BEGIN_P   shift, and go to state 1
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 62


state 42

   22 expr: BEGIN_P NOT expr . END_P

    END_P  shift, and go to state 63


state 43

   23 expr: BEGIN_P UMINUS expr . END_P

    END_P  shift, and go to state 64


state 44

    9 expr: BEGIN_P list END_P .

    $default  reduce using rule 9 (expr)


state 45

    1 list: list expr .

    $default  reduce using rule 1 (list)


state 46

   10 expr: BEGIN_P expr END_P .

    $default  reduce using rule 10 (expr)


state 47

    4 expr: BEGIN_P PRINT STRING END_P .

    $default  reduce using rule 4 (expr)


state 48

    3 expr: BEGIN_P PRINT expr END_P .

    $default  reduce using rule 3 (expr)


state 49

    6 expr: BEGIN_P IF expr expr . END_P
    7     | BEGIN_P IF expr expr . expr END_P

    BEGIN_P   shift, and go to state 1
    END_P     shift, and go to state 65
    VARIABLE  shift, and go to state 2
    NUMBER    shift, and go to state 3

    expr  go to state 66


state 50

    8 expr: BEGIN_P WHILE expr expr . END_P

    END_P  shift, and go to state 67


state 51

    1 list: list expr .
   24 expr: BEGIN_P DO list expr . END_P

    END_P  shift, and go to state 68

    $default  reduce using rule 1 (list)


state 52

   21 expr: BEGIN_P PRINTLN STRING END_P .

    $default  reduce using rule 21 (expr)


state 53

   20 expr: BEGIN_P PRINTLN expr END_P .

    $default  reduce using rule 20 (expr)


state 54

   19 expr: BEGIN_P NOTEQUALTO expr expr . END_P

    END_P  shift, and go to state 69


state 55

   18 expr: BEGIN_P EQUALTO expr expr . END_P

    END_P  shift, and go to state 70


state 56

   11 expr: BEGIN_P EQUAL VARIABLE expr . END_P

    END_P  shift, and go to state 71


state 57

   13 expr: BEGIN_P GREATER expr expr . END_P

    END_P  shift, and go to state 72


state 58

   12 expr: BEGIN_P LESS expr expr . END_P

    END_P  shift, and go to state 73


state 59

   15 expr: BEGIN_P MINUS expr expr . END_P

    END_P  shift, and go to state 74


state 60

   14 expr: BEGIN_P PLUS expr expr . END_P

    END_P  shift, and go to state 75


state 61

   17 expr: BEGIN_P SLASH expr expr . END_P

    END_P  shift, and go to state 76


state 62

   16 expr: BEGIN_P STAR expr expr . END_P

    END_P  shift, and go to state 77


state 63

   22 expr: BEGIN_P NOT expr END_P .

    $default  reduce using rule 22 (expr)


state 64

   23 expr: BEGIN_P UMINUS expr END_P .

    $default  reduce using rule 23 (expr)


state 65

    6 expr: BEGIN_P IF expr expr END_P .

    $default  reduce using rule 6 (expr)


state 66

    7 expr: BEGIN_P IF expr expr expr . END_P

    END_P  shift, and go to state 78


state 67

    8 expr: BEGIN_P WHILE expr expr END_P .

    $default  reduce using rule 8 (expr)


state 68

   24 expr: BEGIN_P DO list expr END_P .

    $default  reduce using rule 24 (expr)


state 69

   19 expr: BEGIN_P NOTEQUALTO expr expr END_P .

    $default  reduce using rule 19 (expr)


state 70

   18 expr: BEGIN_P EQUALTO expr expr END_P .

    $default  reduce using rule 18 (expr)


state 71

   11 expr: BEGIN_P EQUAL VARIABLE expr END_P .

    $default  reduce using rule 11 (expr)


state 72

   13 expr: BEGIN_P GREATER expr expr END_P .

    $default  reduce using rule 13 (expr)


state 73

   12 expr: BEGIN_P LESS expr expr END_P .

    $default  reduce using rule 12 (expr)


state 74

   15 expr: BEGIN_P MINUS expr expr END_P .

    $default  reduce using rule 15 (expr)


state 75

   14 expr: BEGIN_P PLUS expr expr END_P .

    $default  reduce using rule 14 (expr)


state 76

   17 expr: BEGIN_P SLASH expr expr END_P .

    $default  reduce using rule 17 (expr)


state 77

   16 expr: BEGIN_P STAR expr expr END_P .

    $default  reduce using rule 16 (expr)


state 78

    7 expr: BEGIN_P IF expr expr expr END_P .

    $default  reduce using rule 7 (expr)
